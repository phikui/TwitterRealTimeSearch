package model;

import utilities.HelperFunctions;

import java.util.List;
import java.util.Date;


/**
 * Transports a tweetObject and stores
 * all information generated by the preprocessor.
 *
 * TransportObjects allow the RTSIndices to directly
 * insert tweetIDs without stemming the tweet's content
 * or calculating the significance.
 */
public class TransportObject {

    /*
     * Fields populated by the constructor
     */
    // for determining if the object is a query or not
    private boolean isQuery;
    // Holds either the tweet's content or the search query
    private String text;
    // either query timestamp or taken from the tweet
    private Date timestamp;
    // number of tweets to return in queries, only used for queries
    private int k;
    // filled by the preprocessor based on number of
    // followers at point in time when tweet was written
    private float significance;

    /*
     * Fields populated by the preprocessor
     */
    // filled by the preprocessor using stemming,
    // based on the text field
    private List<String> terms;

    /*
     * Fields populated by the writer/one of the query processors
     */
    // Writer needs to insert the tweet into the
    // TweetDictionary and store the fetched tweetID here.
    // No work for the query processor here, tweetID is null
    // for queries.
    private int tweetID;

    // Writer translates already stemmed list of terms into
    // list of termIDs. Therefore the writer has to insert
    // terms into the TermDictionary and retrieve TermIDs
    private List<Integer> termIDs;

    /*
     * Constructor and Getters/Setters
     */
    // Constructor for arriving tweets
    public TransportObject(TweetObject tweetObject) {
        this.isQuery = false;
        this.text = tweetObject.getText();
        this.timestamp = tweetObject.getTimestamp();
        this.significance = HelperFunctions.calculateSignificance(tweetObject);
    }

    // Constructor for arriving queries
    public TransportObject(String query, Date timestamp, int k) {
        this.isQuery = true;
        this.text = query;
        this.timestamp = timestamp;
        this.k = k;
    }

    public boolean isQuery() {
        return isQuery;
    }

    public String getText() {
        return this.text;
    }

    public Date getTimestamp() {
        return timestamp;
    }

    public int getk() {
        return this.k;
    }

    public float getSignificance() {
        return this.significance;
    }

    public List<String> getTerms() {
        return terms;
    }

    public void setTerms(List<String> terms) {
        this.terms = terms;
    }

    public int getTweetID() {
        return tweetID;
    }

    public void setTweetID(int tweetID) {
        this.tweetID = tweetID;
    }

    public List<Integer> getTermIDs() {
        return termIDs;
    }

    public void setTermIDs(List<Integer> termIDs) {
        this.termIDs = termIDs;
    }

    /*
     * Helper functions
     */
    public float calculateFreshness() {
        return HelperFunctions.calculateFreshness(this.timestamp);
    }

    public float calculateTermSimilarity(List<Integer> otherTermIDs) {
        return HelperFunctions.calculateTermSimilarity(this.termIDs, otherTermIDs);
    }
}