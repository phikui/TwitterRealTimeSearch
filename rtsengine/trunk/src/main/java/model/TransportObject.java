package model;

import java.util.ArrayList;
import java.util.Date;

/**
 * Transports a tweetObject and stores
 * all information generated by the preprocessor.
 *
 * TransportObjects allow the RTSIndices to directly
 * insert tweetIDs without stemming the tweet's content
 * or calculating the significance.
 */
public class TransportObject {

    private TweetObject tweetObject;

    /*
     * Fields populated by the preprocessor
     */

    // preprocessor needs to insert the tweet into the
    // TweetDictionary and store the fetched tweetID here
    private int tweetID;

    // preprocessor needs to stem the tweet's content (e.g. via the Stanford Stemming
    // library, insert each term into the TermDictionary and then store the list
    // of termIDs here)
    private ArrayList<Integer> termIDs;

    // can probably just be copied from the tweet by the preprocessor
    private Date timestamp;

    // for determining if the object is a query or not
    private boolean isQuery;

    // needs to be calculated somehow by the preprocessor
    private float significance;

    // probably need something like this if we can get it using the preprocessor
    private float freshness; // based on timeStamp

    private float similarity; // based on word occurrence in relation to tweet word count

    // Add more fields if necessary during preprocessor implementation



    /*
     * Constructor and Getters/Setters
     */
    public TransportObject(TweetObject tweetObject) {
        this.tweetObject = tweetObject;
    }

    public TweetObject getTweetObject() {
        return tweetObject;
    }

    public int getTweetID() {
        return tweetID;
    }

    public void setTweetID(int tweetID) {
        this.tweetID = tweetID;
    }

    public ArrayList<Integer> getTermIDs() {
        return termIDs;
    }

    public void setTermIDs(ArrayList<Integer> termIDs) {
        this.termIDs = termIDs;
    }

    public Date getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(Date timestamp) {
        this.timestamp = timestamp;
    }

    public boolean isQuery() {
        return isQuery;
    }

    public void setIsQuery(boolean isQuery)  {
        this.isQuery = isQuery;
    }

    public float getSignificance() {
        return significance;
    }

    public void setSignificance(float significance) {
        this.significance = significance;
    }

    public float getFreshness() {
        return freshness;
    }

    public void setFreshness(float freshness) {
        this.freshness = freshness;
    }

    public float getSimilarity() { return similarity; }

    public void setSimilarity(float similarity) { this.similarity = similarity; }

}
